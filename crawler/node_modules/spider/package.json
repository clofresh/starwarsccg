{
  "name": "spider",
  "description": "Programmable spidering of web sites with node.js and jQuery",
  "tags": [
    "dom",
    "javascript",
    "crawling",
    "jquery",
    "spider",
    "spidering"
  ],
  "version": "0.1.0",
  "author": {
    "name": "Mikeal Rogers",
    "email": "mikeal.rogers@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/mikeal/spider.git"
  },
  "bugs": {
    "url": "http://github.com/mikeal/spider/issues"
  },
  "engines": [
    "node >= 0.6.4"
  ],
  "main": "./main",
  "dependencies": {
    "request": ">= 1.9.3",
    "jsdom": ">= 0.2.13",
    "routes": ">= 0.1.0",
    "cookiejar": ">= 1.3.0"
  },
  "readme": "# Spider -- Programmable spidering of web sites with node.js and jQuery\n\n## Install\n\nFrom source:\n\n<pre>\n  git clone git://github.com/mikeal/spider.git \n  cd spider\n  npm link .\n</pre>\n\n## (How to use the) API\n\n### Creating a Spider\n<pre>\n  var spider = require('spider');\n  var s = spider();\n</pre>\n\n#### spider(options)\n\nThe `options` object can have the following fields:\n\n* `maxSockets` - Integer containing the maximum amount of sockets in the pool. Defaults to `4`.\n* `userAgent` - The User Agent String to be sent to the remote server along with our request. Defaults to `Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_4; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.41 Safari/534.7` (firefox userAgent String).\n* `cache` -  The Cache object to be used as cache. Defaults to NoCache, see code for implementation details for a new Cache object.\n* `pool` - A hash object containing the agents for the requests. If omitted the requests will use the global pool which is set to maxSockets.\n\n### Adding a Route Handler\n\n#### spider.route(hosts, pattern, cb)\nWhere the params are the following : \n\n* `hosts` - A string -- or an array of string -- representing the `host` part of the targeted URL(s).\n* `pattern` - The pattern against which spider tries to match the remaining (`pathname` + `search` + `hash`) of the URL(s).\n* `cb` - A function of the form `function(window, $)` where\n  * `this` - Will be a variable referencing the `Routes.match` return object/value with some other goodies added from spider. For more info see https://github.com/aaronblohowiak/routes.js\n  * `window` - Will be a variable referencing the document's window.\n  * `$` - Will be the variable referencing the jQuery Object.\n\n### Queuing an URL for spider to fetch.\n\n`spider.get(url)` where `url` is the url to fetch.\n\n### Extending / Replacing the MemoryCache \n\nCurrently the MemoryCache must provide the following methods:\n\n* `get(url, cb)` - Returns `url`'s `body` field via the `cb` callback/continuation if it exists. Returns `null` otherwise.\n  * `cb` - Must be of the form `function(retval) {...}`\n* `getHeaders(url, cb)` - Returns `url`'s `headers` field via the `cb` callback/continuation if it exists. Returns `null` otherwise.\n  * `cb` - Must be of the form `function(retval) {...}`\n* `set(url, headers, body)` - Sets/Saves `url`'s `headers` and `body` in the cache.\n\n### Setting the verbose/log level\n`spider.log(level)` - Where `level` is a string that can be any of `\"debug\"`, `\"info\"`, `\"error\"`\n",
  "_id": "spider@0.1.0",
  "_from": "spider@0.x.x"
}
